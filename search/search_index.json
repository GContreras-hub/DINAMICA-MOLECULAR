{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Din\u00e1mica Molecular en Dos Y Tres Dimensiones - Discos S\u00f3lidos","text":"<p>Proyecto de investigaci\u00f3n para el proyecto final del curso FS-0432: F\u00edsica Computacional.</p>"},{"location":"#descripcion","title":"Descripci\u00f3n","text":"<p>Este proyecto simula un sistema de part\u00edculas esf\u00e9ricas discos s\u00f3lidos interactuando en un espacio c\u00fabico, bajo colisiones el\u00e1sticas y rebotes en las paredes. Se estudian patrones de movimiento, distribuci\u00f3n espacial y comportamiento colectivo usando simulaci\u00f3n molecular b\u00e1sica.</p>"},{"location":"#objetivos","title":"Objetivos","text":"<ul> <li>Implementar clases y estructuras orientadas a objetos en python para representar part\u00edculas.</li> <li>Aplicar colisiones el\u00e1sticas entre part\u00edculas y rebotes en paredes.</li> <li>Simular din\u00e1micamente el sistema durante un tiempo dado.</li> <li>Generar histogramas espaciales y visualizaci\u00f3n de resultados por medio de matplotlib.</li> <li>Aplicar principios de paralelismo, eficiencia computacional y buenas pr\u00e1cticas con Git.</li> </ul>"},{"location":"#tecnicas-y-recursos-utilizados","title":"Tecnicas y recursos utilizados","text":"<ul> <li>Python 3</li> <li>Jupyter Notebook</li> <li>NumPy</li> <li>Matplotlib</li> <li>Organizaci\u00f3n modular (<code>src/</code> con <code>sim.py</code>, <code>colisiones.py</code>, <code>simulador.py</code>)</li> <li>Git y GitHub</li> </ul>"},{"location":"#estructura-del-repositorio","title":"Estructura del repositorio","text":"<p>```plaintext DINAMICA-MOLECULAR/ \u251c\u2500\u2500 src/ \u2502   \u251c\u2500\u2500 sim.py              # Clase Particula y generaci\u00f3n del sistema \u2502   \u251c\u2500\u2500 colisiones.py       # L\u00f3gica de colisiones entre part\u00edculas \u2502   \u2514\u2500\u2500 simulador.py        # Bucle principal de simulaci\u00f3n \u2502 \u251c\u2500\u2500 notebook/ \u2502   \u2514\u2500\u2500 proyecto_final.ipynb  # Notebook principal con ejecuci\u00f3n y visualizaci\u00f3n \u2502 \u251c\u2500\u2500 docs/ \u2502   \u251c\u2500\u2500 metodologia.md        # Documento explicativo del problema, recursos y enfoque \u2502   \u251c\u2500\u2500tutorial.md            # Explicaci\u00f3n rapida para ejecutar el notebook \u2502   \u251c\u2500\u2500 graficos/             # Gr\u00e1ficos en PNG generados por la simulaci\u00f3n \u2502   \u2502   \u251c\u2500\u2500 Fig1.png \u2502   \u2502   \u251c\u2500\u2500 Fig2.png \u2502   \u2502   \u2514\u2500\u2500 Fign.png \u2502   \u2514\u2500\u2500 Reporte_final.pdf     # Reporte del proyecto en formato PDF \u2502 \u251c\u2500\u2500 presentaci\u00f3n/ \u2502   \u2514\u2500\u2500 Diapositivas.pdf      # Diapositivas utilizadas para la exposici\u00f3n final \u2502 \u251c\u2500\u2500 requirements.txt \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 LICENSE \u2514\u2500\u2500 README.md</p>"},{"location":"explicacion_notebook/","title":"Explicaci\u00f3n del Notebook","text":"<p>Este archivo Jupyter Notebook contiene el desarrollo principal del proyecto de simulaci\u00f3n de din\u00e1mica molecular con discos s\u00f3lidos. Aqu\u00ed se explican las secciones del notebook y c\u00f3mo usarlo correctamente.</p>"},{"location":"explicacion_notebook/#estructura-general-del-notebook","title":"Estructura general del notebook","text":"<ol> <li>Importaci\u00f3n de librer\u00edas</li> <li> <p>Se importan <code>numpy</code>, <code>matplotlib.pyplot</code>, y los m\u00f3dulos creados en <code>src/</code>.</p> </li> <li> <p>Definici\u00f3n de par\u00e1metros del sistema</p> </li> <li><code>L</code>: tama\u00f1o del cubo simulado</li> <li><code>dt</code>: paso de tiempo</li> <li><code>t</code>: tiempo total de simulaci\u00f3n</li> <li> <p><code>N</code>: cantidad de part\u00edculas</p> </li> <li> <p>Generaci\u00f3n de part\u00edculas</p> </li> <li>Se usa <code>generar_posiciones(N)</code> desde <code>sim.py</code> para inicializar part\u00edculas con posiciones, radios, masas y velocidades aleatorias.</li> <li> <p>Se asegura que no haya solapamientos iniciales.</p> </li> <li> <p>Ejecuci\u00f3n de la simulaci\u00f3n</p> </li> <li>Se llama a <code>simular(particulas, t, dt, L)</code> desde <code>simulador.py</code>, que ejecuta el bucle temporal completo.</li> <li> <p>Se recolectan todas las posiciones en un array para an\u00e1lisis posterior.</p> </li> <li> <p>Visualizaci\u00f3n</p> </li> <li>Se genera un histograma 3D de las posiciones acumuladas (<code>np.histogramdd</code>).</li> <li>Se grafican cortes planos del histograma: XY, XZ, YZ usando <code>matplotlib.pyplot.imshow</code>.</li> </ol>"},{"location":"explicacion_notebook/#guia-rapida-para-ejecutar-el-proyecto","title":"Gu\u00eda r\u00e1pida para ejecutar el proyecto","text":"<p>Este proyecto est\u00e1 dise\u00f1ado para correr desde Jupyter Notebook. A continuaci\u00f3n se resumen los pasos necesarios para ejecutarlo correctamente.</p>"},{"location":"explicacion_notebook/#1-clonar-el-repositorio","title":"1. Clonar el repositorio","text":"<p>bash: git clone https://github.com/GContreras-hub/DINAMICA-MOLECULAR.git cd DINAMICA-MOLECULAR</p>"},{"location":"explicacion_notebook/#2-instalar-dependencias-de-ser-necesario","title":"2. Instalar dependencias (de ser necesario)","text":"<p>bash: pip install numpy matplotlib</p>"},{"location":"explicacion_notebook/#3-abrir-el-notebook","title":"3. Abrir el notebook","text":"<p>cd notebook jupyter notebook</p>"},{"location":"explicacion_notebook/#4-abrir-el-archivo-del-proyecto","title":"4. Abrir el archivo del proyecto","text":"<p>proyecto_final.ipynb</p>"},{"location":"explicacion_notebook/#5-ejecutar-el-notebook","title":"5. Ejecutar el notebook","text":"<ul> <li>Ejecut\u00e1 todas las celdas en orden, usando Shift + Enter.</li> <li>Al finalizar, se mostrar\u00e1n los gr\u00e1ficos generados por la simulaci\u00f3n.</li> </ul>"},{"location":"explicacion_notebook/#6-importar-desde-src-de-ser-necesario","title":"6. Importar desde src/ (de ser necesario)","text":"<p>import sys sys.path.append('../src')</p>"},{"location":"explicacion_notebook/#7-visualizar-las-graficas","title":"7. Visualizar las graficas","text":""},{"location":"metodologia/","title":"Metodolog\u00eda del Proyecto","text":""},{"location":"metodologia/#enunciado-del-problema","title":"Enunciado del problema","text":""},{"location":"metodologia/#utilizando-las-ecuaciones-de-cinematica-elabore-un-programa-en-dos-dimensiones-con-4-discos-solidos-de-radio-r-que-se-mueven-sin-friccion-ni-momento-angular-dentro-de-una-caja-de-longitud-unitaria-a-estos-discos-se-les-puede-asociar-una-energia-cinetica-inicial-aleatoria-resultando-asi-una-distribucion-de-velocidades-aleatoria-para-el-sistema","title":"Utilizando las ecuaciones de cinematica, elabore un programa en dos dimensiones con 4 discos solidos de radio r que se mueven sin friccion ni momento angular dentro de una caja de longitud unitaria. A estos discos se les puede asociar una energ\u00eda cinetica inicial aleatoria, resultando as\u00ed una distribucion de velocidades aleatoria para el sistema.","text":""},{"location":"metodologia/#herramientas-utilizadas","title":"Herramientas utilizadas","text":"<ul> <li>Lenguaje principal: Python 3</li> <li>Entorno de ejecuci\u00f3n: Jupyter Notebook</li> <li>Librer\u00edas: </li> <li>NumPy: para operaciones vectoriales y generaci\u00f3n aleatoria</li> <li>Matplotlib: para visualizaci\u00f3n de resultados</li> <li>Organizaci\u00f3n modular del c\u00f3digo: </li> <li><code>src/sim.py</code>: clase <code>Particula</code> y generaci\u00f3n de condiciones iniciales</li> <li><code>src/colisiones.py</code>: gesti\u00f3n de colisiones entre part\u00edculas</li> <li><code>src/simulador.py</code>: ciclo de simulaci\u00f3n y recolecci\u00f3n de datos</li> <li>Control de versiones: Git y GitHub</li> </ul>"},{"location":"metodologia/#implementacion","title":"Implementaci\u00f3n","text":"<ol> <li>Se defini\u00f3 una clase <code>Particula</code> con atributos como posici\u00f3n, velocidad, masa y radio.</li> <li>Se inicializaron m\u00faltiples part\u00edculas en posiciones aleatorias sin superposici\u00f3n, respetando el tama\u00f1o del recipiente.</li> <li>Se simularon colisiones entre part\u00edculas con conservaci\u00f3n del momento y energ\u00eda.</li> <li>Se implement\u00f3 rebote con p\u00e9rdida parcial de velocidad contra las paredes (coeficiente de restituci\u00f3n &lt; 1).</li> <li>Se recolectaron todas las posiciones en un arreglo durante la simulaci\u00f3n.</li> <li>Se generaron histogramas tridimensionales (<code>np.histogramdd</code>) y visualizaciones por cortes planos (XY, XZ, YZ).</li> </ol>"},{"location":"metodologia/#decisiones-tecnicas-y-optimizaciones","title":"Decisiones t\u00e9cnicas y optimizaciones","text":"<ul> <li>Se us\u00f3 programaci\u00f3n orientada a objetos para encapsular la l\u00f3gica de cada part\u00edcula.</li> <li>Se aplic\u00f3 una verificaci\u00f3n de solapamiento durante la creaci\u00f3n inicial para evitar interpenetraciones.</li> <li>Se modulariz\u00f3 el c\u00f3digo para permitir la reutilizaci\u00f3n de funciones y facilitar pruebas.</li> <li>El sistema puede escalar a m\u00e1s part\u00edculas con cambios m\u00ednimos en los par\u00e1metros.</li> </ul>"},{"location":"metodologia/#metodologia-de-trabajo","title":"Metodolog\u00eda de trabajo","text":"<ul> <li>El proyecto fue desarrollado en etapas:</li> <li>Pruebas iniciales de part\u00edculas individuales.</li> <li>Implementaci\u00f3n de colisiones entre pares.</li> <li>Recolecci\u00f3n de datos y visualizaci\u00f3n.</li> <li>Modularizaci\u00f3n del c\u00f3digo.</li> <li>Documentaci\u00f3n y presentaci\u00f3n final.</li> <li>Se us\u00f3 Git para el control de versiones y GitHub para alojamiento y colaboraci\u00f3n.</li> </ul>"},{"location":"metodologia/#resultados-esperados","title":"Resultados esperados","text":"<ul> <li>Distribuciones de part\u00edculas que reflejan el comportamiento din\u00e1mico del sistema.</li> <li>Visualizaci\u00f3n de zonas de mayor densidad por medio de histogramas.</li> <li>Posibilidad de ajustar par\u00e1metros (N, masa, velocidad) para estudiar distintas condiciones f\u00edsicas.</li> </ul>"},{"location":"metodologia/#archivos-generados","title":"Archivos generados","text":"<ul> <li>Notebook interactivo: <code>notebook/proyecto_final.ipynb</code></li> <li>Gr\u00e1ficos en <code>docs/graficos/</code></li> <li>Diapositivas para presentaci\u00f3n en <code>presentaci\u00f3n/</code></li> <li>Reporte PDF final con documentaci\u00f3n y visualizaci\u00f3n</li> </ul>"},{"location":"metodologia/#conclusion","title":"Conclusi\u00f3n","text":"<p>El proyecto permiti\u00f3 aplicar m\u00faltiples t\u00e9cnicas vistas en el curso de Fisica Computacional: FS-0432, incluyendo simulaci\u00f3n f\u00edsica, an\u00e1lisis num\u00e9rico, organizaci\u00f3n modular del c\u00f3digo, uso eficiente de memoria y control de versiones. Adem\u00e1s, ofreci\u00f3 una experiencia pr\u00e1ctica en el dise\u00f1o, ejecuci\u00f3n y presentaci\u00f3n de una investigaci\u00f3n computacional.</p>"},{"location":"tutorial/","title":"Explicaci\u00f3n del Notebook","text":"<p>Este archivo Jupyter Notebook contiene el desarrollo principal del proyecto de simulaci\u00f3n de din\u00e1mica molecular con discos s\u00f3lidos. Aqu\u00ed se explican las secciones del notebook y c\u00f3mo usarlo correctamente.</p>"},{"location":"tutorial/#estructura-general-del-notebook","title":"Estructura general del notebook","text":"<ol> <li>Importaci\u00f3n de librer\u00edas</li> <li> <p>Se importan <code>numpy</code>, <code>matplotlib.pyplot</code>, y los m\u00f3dulos creados en <code>src/</code>.</p> </li> <li> <p>Definici\u00f3n de par\u00e1metros del sistema</p> </li> <li><code>L</code>: tama\u00f1o del cubo simulado</li> <li><code>dt</code>: paso de tiempo</li> <li><code>t</code>: tiempo total de simulaci\u00f3n</li> <li> <p><code>N</code>: cantidad de part\u00edculas</p> </li> <li> <p>Generaci\u00f3n de part\u00edculas</p> </li> <li>Se usa <code>generar_posiciones(N)</code> desde <code>sim.py</code> para inicializar part\u00edculas con posiciones, radios, masas y velocidades aleatorias.</li> <li> <p>Se asegura que no haya solapamientos iniciales.</p> </li> <li> <p>Ejecuci\u00f3n de la simulaci\u00f3n</p> </li> <li>Se llama a <code>simular(particulas, t, dt, L)</code> desde <code>simulador.py</code>, que ejecuta el bucle temporal completo.</li> <li> <p>Se recolectan todas las posiciones en un array para an\u00e1lisis posterior.</p> </li> <li> <p>Visualizaci\u00f3n</p> </li> <li>Se genera un histograma 3D de las posiciones acumuladas (<code>np.histogramdd</code>).</li> <li>Se grafican cortes planos del histograma: XY, XZ, YZ usando <code>matplotlib.pyplot.imshow</code>.</li> </ol>"},{"location":"tutorial/#guia-rapida-para-ejecutar-el-proyecto","title":"Gu\u00eda r\u00e1pida para ejecutar el proyecto","text":"<p>Este proyecto est\u00e1 dise\u00f1ado para correr desde Jupyter Notebook. A continuaci\u00f3n se resumen los pasos necesarios para ejecutarlo correctamente.</p>"},{"location":"tutorial/#1-clonar-el-repositorio","title":"1. Clonar el repositorio","text":"<p>bash: git clone https://github.com/GContreras-hub/DINAMICA-MOLECULAR.git cd DINAMICA-MOLECULAR</p>"},{"location":"tutorial/#2-instalar-dependencias-de-ser-necesario","title":"2. Instalar dependencias (de ser necesario)","text":"<p>bash: pip install numpy matplotlib</p>"},{"location":"tutorial/#3-abrir-el-notebook","title":"3. Abrir el notebook","text":"<p>cd notebook jupyter notebook</p>"},{"location":"tutorial/#4-abrir-el-archivo-del-proyecto","title":"4. Abrir el archivo del proyecto","text":"<p>proyecto_final.ipynb</p>"},{"location":"tutorial/#5-ejecutar-el-notebook","title":"5. Ejecutar el notebook","text":"<ul> <li>Ejecut\u00e1 todas las celdas en orden, usando Shift + Enter.</li> <li>Al finalizar, se mostrar\u00e1n los gr\u00e1ficos generados por la simulaci\u00f3n.</li> </ul>"},{"location":"tutorial/#6-importar-desde-src-de-ser-necesario","title":"6. Importar desde src/ (de ser necesario)","text":"<p>import sys sys.path.append('../src')</p>"},{"location":"tutorial/#7-visualizar-las-graficas","title":"7. Visualizar las graficas","text":""}]}